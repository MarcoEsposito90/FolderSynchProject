//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FolderSynchMUIClient.FolderSynchService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FolderSynchMUIClient.FolderSynchService.Folder[] FoldersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FolderSynchMUIClient.FolderSynchService.Folder[] Folders {
            get {
                return this.FoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.FoldersField, value) != true)) {
                    this.FoldersField = value;
                    this.RaisePropertyChanged("Folders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Folder", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    public partial class Folder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AutoDeleteTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AutoRefreshTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SynchDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AutoDeleteTime {
            get {
                return this.AutoDeleteTimeField;
            }
            set {
                if ((this.AutoDeleteTimeField.Equals(value) != true)) {
                    this.AutoDeleteTimeField = value;
                    this.RaisePropertyChanged("AutoDeleteTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AutoRefreshTime {
            get {
                return this.AutoRefreshTimeField;
            }
            set {
                if ((this.AutoRefreshTimeField.Equals(value) != true)) {
                    this.AutoRefreshTimeField = value;
                    this.RaisePropertyChanged("AutoRefreshTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderName {
            get {
                return this.FolderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderNameField, value) != true)) {
                    this.FolderNameField = value;
                    this.RaisePropertyChanged("FolderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SynchDate {
            get {
                return this.SynchDateField;
            }
            set {
                if ((this.SynchDateField.Equals(value) != true)) {
                    this.SynchDateField = value;
                    this.RaisePropertyChanged("SynchDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyBaseFault", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FolderSynchMUIClient.FolderSynchService.LoginFault))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FolderSynchMUIClient.FolderSynchService.RegistrationFault))]
    public partial class MyBaseFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginFault", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    public partial class LoginFault : FolderSynchMUIClient.FolderSynchService.MyBaseFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegistrationFault", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    public partial class RegistrationFault : FolderSynchMUIClient.FolderSynchService.MyBaseFault {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Transaction", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FolderSynchMUIClient.FolderSynchService.RollbackTransaction))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FolderSynchMUIClient.FolderSynchService.UpdateTransaction))]
    public partial class Transaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FolderSynchMUIClient.FolderSynchService.User UserField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseFolder {
            get {
                return this.BaseFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseFolderField, value) != true)) {
                    this.BaseFolderField = value;
                    this.RaisePropertyChanged("BaseFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionID {
            get {
                return this.TransactionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionIDField, value) != true)) {
                    this.TransactionIDField = value;
                    this.RaisePropertyChanged("TransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FolderSynchMUIClient.FolderSynchService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RollbackTransaction", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    public partial class RollbackTransaction : FolderSynchMUIClient.FolderSynchService.Transaction {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UpdateNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UpdateNumber {
            get {
                return this.UpdateNumberField;
            }
            set {
                if ((this.UpdateNumberField.Equals(value) != true)) {
                    this.UpdateNumberField = value;
                    this.RaisePropertyChanged("UpdateNumber");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateTransaction", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    public partial class UpdateTransaction : FolderSynchMUIClient.FolderSynchService.Transaction {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Update", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
    [System.SerializableAttribute()]
    public partial class Update : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BaseFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[] UpdateEntriesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UpdateFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BaseFolder {
            get {
                return this.BaseFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseFolderField, value) != true)) {
                    this.BaseFolderField = value;
                    this.RaisePropertyChanged("BaseFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransactionID {
            get {
                return this.TransactionIDField;
            }
            set {
                if ((object.ReferenceEquals(this.TransactionIDField, value) != true)) {
                    this.TransactionIDField = value;
                    this.RaisePropertyChanged("TransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[] UpdateEntries {
            get {
                return this.UpdateEntriesField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateEntriesField, value) != true)) {
                    this.UpdateEntriesField = value;
                    this.RaisePropertyChanged("UpdateEntries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UpdateFolder {
            get {
                return this.UpdateFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.UpdateFolderField, value) != true)) {
                    this.UpdateFolderField = value;
                    this.RaisePropertyChanged("UpdateFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerStepThroughAttribute()]
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="Update.UpdateEntry", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
        [System.SerializableAttribute()]
        public partial class UpdateEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
            
            [System.NonSerializedAttribute()]
            private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private System.DateTime EntryTimestampField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private long ItemDimensionField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private string ItemLocalPathField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private int UpdateNumberField;
            
            [System.Runtime.Serialization.OptionalFieldAttribute()]
            private int UpdateTypeField;
            
            public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
                get {
                    return this.extensionDataField;
                }
                set {
                    this.extensionDataField = value;
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public System.DateTime EntryTimestamp {
                get {
                    return this.EntryTimestampField;
                }
                set {
                    if ((this.EntryTimestampField.Equals(value) != true)) {
                        this.EntryTimestampField = value;
                        this.RaisePropertyChanged("EntryTimestamp");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public long ItemDimension {
                get {
                    return this.ItemDimensionField;
                }
                set {
                    if ((this.ItemDimensionField.Equals(value) != true)) {
                        this.ItemDimensionField = value;
                        this.RaisePropertyChanged("ItemDimension");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public string ItemLocalPath {
                get {
                    return this.ItemLocalPathField;
                }
                set {
                    if ((object.ReferenceEquals(this.ItemLocalPathField, value) != true)) {
                        this.ItemLocalPathField = value;
                        this.RaisePropertyChanged("ItemLocalPath");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public int UpdateNumber {
                get {
                    return this.UpdateNumberField;
                }
                set {
                    if ((this.UpdateNumberField.Equals(value) != true)) {
                        this.UpdateNumberField = value;
                        this.RaisePropertyChanged("UpdateNumber");
                    }
                }
            }
            
            [System.Runtime.Serialization.DataMemberAttribute()]
            public int UpdateType {
                get {
                    return this.UpdateTypeField;
                }
                set {
                    if ((this.UpdateTypeField.Equals(value) != true)) {
                        this.UpdateTypeField = value;
                        this.RaisePropertyChanged("UpdateType");
                    }
                }
            }
            
            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
            
            protected void RaisePropertyChanged(string propertyName) {
                System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
                if ((propertyChanged != null)) {
                    propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FolderSynchService.FolderSynchServiceContract", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface FolderSynchServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FolderSynchServiceContract/RegisterNewUser", ReplyAction="http://tempuri.org/FolderSynchServiceContract/RegisterNewUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FolderSynchMUIClient.FolderSynchService.RegistrationFault), Action="http://tempuri.org/FolderSynchServiceContract/RegisterNewUserRegistrationFaultFau" +
            "lt", Name="RegistrationFault", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
        FolderSynchMUIClient.FolderSynchService.User RegisterNewUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FolderSynchServiceContract/RegisterNewUser", ReplyAction="http://tempuri.org/FolderSynchServiceContract/RegisterNewUserResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.User> RegisterNewUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FolderSynchServiceContract/loginUser", ReplyAction="http://tempuri.org/FolderSynchServiceContract/loginUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FolderSynchMUIClient.FolderSynchService.LoginFault), Action="http://tempuri.org/FolderSynchServiceContract/loginUserLoginFaultFault", Name="LoginFault", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
        FolderSynchMUIClient.FolderSynchService.User loginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FolderSynchServiceContract/loginUser", ReplyAction="http://tempuri.org/FolderSynchServiceContract/loginUserResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.User> loginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/logoutUser", ReplyAction="http://tempuri.org/FolderSynchServiceContract/logoutUserResponse")]
        void logoutUser(FolderSynchMUIClient.FolderSynchService.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/logoutUser", ReplyAction="http://tempuri.org/FolderSynchServiceContract/logoutUserResponse")]
        System.Threading.Tasks.Task logoutUserAsync(FolderSynchMUIClient.FolderSynchService.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/changeCredentials", ReplyAction="http://tempuri.org/FolderSynchServiceContract/changeCredentialsResponse")]
        void changeCredentials(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/changeCredentials", ReplyAction="http://tempuri.org/FolderSynchServiceContract/changeCredentialsResponse")]
        System.Threading.Tasks.Task changeCredentialsAsync(string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/addNewSynchronizedFolder", ReplyAction="http://tempuri.org/FolderSynchServiceContract/addNewSynchronizedFolderResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(FolderSynchMUIClient.FolderSynchService.MyBaseFault), Action="http://tempuri.org/FolderSynchServiceContract/addNewSynchronizedFolderMyBaseFault" +
            "Fault", Name="MyBaseFault", Namespace="http://schemas.datacontract.org/2004/07/ServicesProject")]
        void addNewSynchronizedFolder(FolderSynchMUIClient.FolderSynchService.Folder folderName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/addNewSynchronizedFolder", ReplyAction="http://tempuri.org/FolderSynchServiceContract/addNewSynchronizedFolderResponse")]
        System.Threading.Tasks.Task addNewSynchronizedFolderAsync(FolderSynchMUIClient.FolderSynchService.Folder folderName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/beginUpdate", ReplyAction="http://tempuri.org/FolderSynchServiceContract/beginUpdateResponse")]
        FolderSynchMUIClient.FolderSynchService.UpdateTransaction beginUpdate(string baseFolder, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/beginUpdate", ReplyAction="http://tempuri.org/FolderSynchServiceContract/beginUpdateResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.UpdateTransaction> beginUpdateAsync(string baseFolder, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/uploadFile", ReplyAction="http://tempuri.org/FolderSynchServiceContract/uploadFileResponse")]
        void uploadFile(string transactionID, string baseFolder, string localPath, int type, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/uploadFile", ReplyAction="http://tempuri.org/FolderSynchServiceContract/uploadFileResponse")]
        System.Threading.Tasks.Task uploadFileAsync(string transactionID, string baseFolder, string localPath, int type, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/deleteFile", ReplyAction="http://tempuri.org/FolderSynchServiceContract/deleteFileResponse")]
        void deleteFile(string transactionID, string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/deleteFile", ReplyAction="http://tempuri.org/FolderSynchServiceContract/deleteFileResponse")]
        System.Threading.Tasks.Task deleteFileAsync(string transactionID, string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/addSubDirectory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/addSubDirectoryResponse")]
        void addSubDirectory(string transactionID, string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/addSubDirectory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/addSubDirectoryResponse")]
        System.Threading.Tasks.Task addSubDirectoryAsync(string transactionID, string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/deleteSubDirectory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/deleteSubDirectoryResponse")]
        void deleteSubDirectory(string transactionID, string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/deleteSubDirectory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/deleteSubDirectoryResponse")]
        System.Threading.Tasks.Task deleteSubDirectoryAsync(string transactionID, string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/updateCommit", ReplyAction="http://tempuri.org/FolderSynchServiceContract/updateCommitResponse")]
        FolderSynchMUIClient.FolderSynchService.Update updateCommit(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/updateCommit", ReplyAction="http://tempuri.org/FolderSynchServiceContract/updateCommitResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update> updateCommitAsync(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/updateAbort", ReplyAction="http://tempuri.org/FolderSynchServiceContract/updateAbortResponse")]
        void updateAbort(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/updateAbort", ReplyAction="http://tempuri.org/FolderSynchServiceContract/updateAbortResponse")]
        System.Threading.Tasks.Task updateAbortAsync(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/getFileHistory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/getFileHistoryResponse")]
        FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[] getFileHistory(string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/getFileHistory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/getFileHistoryResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[]> getFileHistoryAsync(string baseFolder, string localPath);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/getHistory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/getHistoryResponse")]
        FolderSynchMUIClient.FolderSynchService.Update[] getHistory(string baseFolder);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/getHistory", ReplyAction="http://tempuri.org/FolderSynchServiceContract/getHistoryResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update[]> getHistoryAsync(string baseFolder);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/getUpdateFileList", ReplyAction="http://tempuri.org/FolderSynchServiceContract/getUpdateFileListResponse")]
        FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[] getUpdateFileList(FolderSynchMUIClient.FolderSynchService.Update update);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/getUpdateFileList", ReplyAction="http://tempuri.org/FolderSynchServiceContract/getUpdateFileListResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[]> getUpdateFileListAsync(FolderSynchMUIClient.FolderSynchService.Update update);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/beginRollback", ReplyAction="http://tempuri.org/FolderSynchServiceContract/beginRollbackResponse")]
        FolderSynchMUIClient.FolderSynchService.RollbackTransaction beginRollback(FolderSynchMUIClient.FolderSynchService.Update update, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/beginRollback", ReplyAction="http://tempuri.org/FolderSynchServiceContract/beginRollbackResponse")]
        System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.RollbackTransaction> beginRollbackAsync(FolderSynchMUIClient.FolderSynchService.Update update, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/downloadFile", ReplyAction="http://tempuri.org/FolderSynchServiceContract/downloadFileResponse")]
        byte[] downloadFile(string baseFolder, string localPath, int updateNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/downloadFile", ReplyAction="http://tempuri.org/FolderSynchServiceContract/downloadFileResponse")]
        System.Threading.Tasks.Task<byte[]> downloadFileAsync(string baseFolder, string localPath, int updateNumber);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/commitRollback", ReplyAction="http://tempuri.org/FolderSynchServiceContract/commitRollbackResponse")]
        void commitRollback(FolderSynchMUIClient.FolderSynchService.RollbackTransaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/commitRollback", ReplyAction="http://tempuri.org/FolderSynchServiceContract/commitRollbackResponse")]
        System.Threading.Tasks.Task commitRollbackAsync(FolderSynchMUIClient.FolderSynchService.RollbackTransaction transaction);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/changeFolderOptions", ReplyAction="http://tempuri.org/FolderSynchServiceContract/changeFolderOptionsResponse")]
        void changeFolderOptions(string folderName, FolderSynchMUIClient.FolderSynchService.Folder updatedFolder);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/changeFolderOptions", ReplyAction="http://tempuri.org/FolderSynchServiceContract/changeFolderOptionsResponse")]
        System.Threading.Tasks.Task changeFolderOptionsAsync(string folderName, FolderSynchMUIClient.FolderSynchService.Folder updatedFolder);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/removeSynchronizedFolder", ReplyAction="http://tempuri.org/FolderSynchServiceContract/removeSynchronizedFolderResponse")]
        void removeSynchronizedFolder(string folderName);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/FolderSynchServiceContract/removeSynchronizedFolder", ReplyAction="http://tempuri.org/FolderSynchServiceContract/removeSynchronizedFolderResponse")]
        System.Threading.Tasks.Task removeSynchronizedFolderAsync(string folderName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FolderSynchServiceContractChannel : FolderSynchMUIClient.FolderSynchService.FolderSynchServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FolderSynchServiceContractClient : System.ServiceModel.ClientBase<FolderSynchMUIClient.FolderSynchService.FolderSynchServiceContract>, FolderSynchMUIClient.FolderSynchService.FolderSynchServiceContract {
        
        public FolderSynchServiceContractClient() {
        }
        
        public FolderSynchServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FolderSynchServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderSynchServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FolderSynchServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FolderSynchMUIClient.FolderSynchService.User RegisterNewUser(string username, string password) {
            return base.Channel.RegisterNewUser(username, password);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.User> RegisterNewUserAsync(string username, string password) {
            return base.Channel.RegisterNewUserAsync(username, password);
        }
        
        public FolderSynchMUIClient.FolderSynchService.User loginUser(string username, string password) {
            return base.Channel.loginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.User> loginUserAsync(string username, string password) {
            return base.Channel.loginUserAsync(username, password);
        }
        
        public void logoutUser(FolderSynchMUIClient.FolderSynchService.User user) {
            base.Channel.logoutUser(user);
        }
        
        public System.Threading.Tasks.Task logoutUserAsync(FolderSynchMUIClient.FolderSynchService.User user) {
            return base.Channel.logoutUserAsync(user);
        }
        
        public void changeCredentials(string oldPassword, string newPassword) {
            base.Channel.changeCredentials(oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task changeCredentialsAsync(string oldPassword, string newPassword) {
            return base.Channel.changeCredentialsAsync(oldPassword, newPassword);
        }
        
        public void addNewSynchronizedFolder(FolderSynchMUIClient.FolderSynchService.Folder folderName) {
            base.Channel.addNewSynchronizedFolder(folderName);
        }
        
        public System.Threading.Tasks.Task addNewSynchronizedFolderAsync(FolderSynchMUIClient.FolderSynchService.Folder folderName) {
            return base.Channel.addNewSynchronizedFolderAsync(folderName);
        }
        
        public FolderSynchMUIClient.FolderSynchService.UpdateTransaction beginUpdate(string baseFolder, System.DateTime timestamp) {
            return base.Channel.beginUpdate(baseFolder, timestamp);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.UpdateTransaction> beginUpdateAsync(string baseFolder, System.DateTime timestamp) {
            return base.Channel.beginUpdateAsync(baseFolder, timestamp);
        }
        
        public void uploadFile(string transactionID, string baseFolder, string localPath, int type, byte[] data) {
            base.Channel.uploadFile(transactionID, baseFolder, localPath, type, data);
        }
        
        public System.Threading.Tasks.Task uploadFileAsync(string transactionID, string baseFolder, string localPath, int type, byte[] data) {
            return base.Channel.uploadFileAsync(transactionID, baseFolder, localPath, type, data);
        }
        
        public void deleteFile(string transactionID, string baseFolder, string localPath) {
            base.Channel.deleteFile(transactionID, baseFolder, localPath);
        }
        
        public System.Threading.Tasks.Task deleteFileAsync(string transactionID, string baseFolder, string localPath) {
            return base.Channel.deleteFileAsync(transactionID, baseFolder, localPath);
        }
        
        public void addSubDirectory(string transactionID, string baseFolder, string localPath) {
            base.Channel.addSubDirectory(transactionID, baseFolder, localPath);
        }
        
        public System.Threading.Tasks.Task addSubDirectoryAsync(string transactionID, string baseFolder, string localPath) {
            return base.Channel.addSubDirectoryAsync(transactionID, baseFolder, localPath);
        }
        
        public void deleteSubDirectory(string transactionID, string baseFolder, string localPath) {
            base.Channel.deleteSubDirectory(transactionID, baseFolder, localPath);
        }
        
        public System.Threading.Tasks.Task deleteSubDirectoryAsync(string transactionID, string baseFolder, string localPath) {
            return base.Channel.deleteSubDirectoryAsync(transactionID, baseFolder, localPath);
        }
        
        public FolderSynchMUIClient.FolderSynchService.Update updateCommit(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction) {
            return base.Channel.updateCommit(transaction);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update> updateCommitAsync(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction) {
            return base.Channel.updateCommitAsync(transaction);
        }
        
        public void updateAbort(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction) {
            base.Channel.updateAbort(transaction);
        }
        
        public System.Threading.Tasks.Task updateAbortAsync(FolderSynchMUIClient.FolderSynchService.UpdateTransaction transaction) {
            return base.Channel.updateAbortAsync(transaction);
        }
        
        public FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[] getFileHistory(string baseFolder, string localPath) {
            return base.Channel.getFileHistory(baseFolder, localPath);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[]> getFileHistoryAsync(string baseFolder, string localPath) {
            return base.Channel.getFileHistoryAsync(baseFolder, localPath);
        }
        
        public FolderSynchMUIClient.FolderSynchService.Update[] getHistory(string baseFolder) {
            return base.Channel.getHistory(baseFolder);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update[]> getHistoryAsync(string baseFolder) {
            return base.Channel.getHistoryAsync(baseFolder);
        }
        
        public FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[] getUpdateFileList(FolderSynchMUIClient.FolderSynchService.Update update) {
            return base.Channel.getUpdateFileList(update);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.Update.UpdateEntry[]> getUpdateFileListAsync(FolderSynchMUIClient.FolderSynchService.Update update) {
            return base.Channel.getUpdateFileListAsync(update);
        }
        
        public FolderSynchMUIClient.FolderSynchService.RollbackTransaction beginRollback(FolderSynchMUIClient.FolderSynchService.Update update, System.DateTime timestamp) {
            return base.Channel.beginRollback(update, timestamp);
        }
        
        public System.Threading.Tasks.Task<FolderSynchMUIClient.FolderSynchService.RollbackTransaction> beginRollbackAsync(FolderSynchMUIClient.FolderSynchService.Update update, System.DateTime timestamp) {
            return base.Channel.beginRollbackAsync(update, timestamp);
        }
        
        public byte[] downloadFile(string baseFolder, string localPath, int updateNumber) {
            return base.Channel.downloadFile(baseFolder, localPath, updateNumber);
        }
        
        public System.Threading.Tasks.Task<byte[]> downloadFileAsync(string baseFolder, string localPath, int updateNumber) {
            return base.Channel.downloadFileAsync(baseFolder, localPath, updateNumber);
        }
        
        public void commitRollback(FolderSynchMUIClient.FolderSynchService.RollbackTransaction transaction) {
            base.Channel.commitRollback(transaction);
        }
        
        public System.Threading.Tasks.Task commitRollbackAsync(FolderSynchMUIClient.FolderSynchService.RollbackTransaction transaction) {
            return base.Channel.commitRollbackAsync(transaction);
        }
        
        public void changeFolderOptions(string folderName, FolderSynchMUIClient.FolderSynchService.Folder updatedFolder) {
            base.Channel.changeFolderOptions(folderName, updatedFolder);
        }
        
        public System.Threading.Tasks.Task changeFolderOptionsAsync(string folderName, FolderSynchMUIClient.FolderSynchService.Folder updatedFolder) {
            return base.Channel.changeFolderOptionsAsync(folderName, updatedFolder);
        }
        
        public void removeSynchronizedFolder(string folderName) {
            base.Channel.removeSynchronizedFolder(folderName);
        }
        
        public System.Threading.Tasks.Task removeSynchronizedFolderAsync(string folderName) {
            return base.Channel.removeSynchronizedFolderAsync(folderName);
        }
    }
}
